/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/index.js":
/*!*************************!*\
  !*** ./assets/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _cloudamqp_amqp_client_dist_amqp_websocket_client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cloudamqp/amqp-client/dist/amqp-websocket-client.mjs */ \"./node_modules/@cloudamqp/amqp-client/dist/amqp-websocket-client.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\nconst textarea = document.getElementById(\"textarea\")\nconst input = document.getElementById(\"message\")\n\nconst tls = window.location.scheme === \"https:\"\n\n//const url = `${tls ? \"wss\" : \"ws\"}://${window.location.host}`\nconst url = `${tls ? \"wss\" : \"ws\"}://websocket-tcp-relay:15670/ws/amqp`\n// const url = \" https://127.0.0.1:15671\"\n\nconst exchange = \"fpx\"\nconst topic = \"sensores.usv\"\n\nconst start= async(url,exchange,topic)=> {\n  try {        \n    const amqp = new _cloudamqp_amqp_client_dist_amqp_websocket_client_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"](url, \"/\", \"guest\", \"guest\") //vhost, username, password, name, platform\n    const connection =  amqp.connect().then(async (connection)=>{\n      \n      const channel = await connection.channel()    \n      await channel.exchangeDeclare(exchange, \"topic\", { durable: true });\n      const queue  = \"test\" \n      await channel.queueDeclare(queue,{ exclusive: true, durable:false });\n      //const { queue } = await channel.queueDeclare(\"test\",{ exclusive: true, durable:false });\n      // Enviar desde formulario\n      attachPublish(channel,exchange,topic)    \n      await channel.queueBind(queue, exchange, topic); \n      await channel.basicConsume(\n        queue,{ noAck: true },\n        (message) => {\n          const body = message.bodyToString()\n          console.log(`from Queue:${queue}, content: ${body}`);        \n          textarea.value += body + \"\\n\"\n        }      \n      );  \n    },(error)=>{\n      \n      console.log(\"Ha ocurrido un error al conectarse al broker\", error)\n    })\n\n  } catch (err) {\n    console.error(\"Error\", err, \"reconnecting in 1s\")\n    disablePublish()\n    setTimeout(start, 1000)\n  }\n}\n\nfunction attachPublish(ch,exchange,topic) {\n  \n  document.forms[0].onsubmit = async (e) => {\n    e.preventDefault()\n    \n    try {\n      await ch.basicPublish(exchange,topic, Buffer.from(input.value), { contentType: \"text/plain\" })\n    } catch (err) {\n      console.error(\"Error\", err, \"reconnecting in 1s\")\n      disablePublish()\n      setTimeout(start, 1000)\n    }\n    input.value = \"\"\n  }\n}\n\nfunction disablePublish() {\n  document.forms[0].onsubmit = (e) => { alert(\"Disconnected, waiting to be reconnected\") }\n}\n\nstart(url,exchange,topic)\n\n//# sourceURL=webpack://20211125_amqp_test/./assets/index.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://20211125_amqp_test/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://20211125_amqp_test/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://20211125_amqp_test/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/@cloudamqp/amqp-client/dist/amqp-websocket-client.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@cloudamqp/amqp-client/dist/amqp-websocket-client.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass AMQPError extends Error {\n  constructor(message, connection) {\n    super(message);\n    this.name = \"AMQPError\";\n    this.connection = connection;\n  }\n}\n\nclass AMQPQueue {\n  constructor(channel, name) {\n    this.channel = channel;\n    this.name = name;\n  }\n  bind(exchange, routingkey, args = {}) {\n    return new Promise((resolve, reject) => {\n      this.channel.queueBind(this.name, exchange, routingkey, args)\n        .then(() => resolve(this))\n        .catch(reject);\n    })\n  }\n  unbind(exchange, routingkey, args = {}) {\n    return new Promise((resolve, reject) => {\n      this.channel.queueUnbind(this.name, exchange, routingkey, args)\n        .then(() => resolve(this))\n        .catch(reject);\n    })\n  }\n  publish(body, properties) {\n    return new Promise((resolve, reject) => {\n      this.channel.basicPublish(\"\", this.name, body, properties)\n        .then(() => resolve(this))\n        .catch(reject);\n    })\n  }\n  subscribe({noAck = true, exclusive = false} = {}, callback) {\n    return this.channel.basicConsume(this.name, {noAck, exclusive}, callback)\n  }\n  unsubscribe(consumerTag) {\n    return new Promise((resolve, reject) => {\n      this.channel.basicCancel(consumerTag)\n        .then(() => resolve(this))\n        .catch(reject);\n    })\n  }\n  delete() {\n    return new Promise((resolve, reject) => {\n      this.channel.queueDelete(this.name)\n        .then(() => resolve(this))\n        .catch(reject);\n    })\n  }\n  get({ noAck = true}) {\n    return this.channel.basicGet(this.name, { noAck })\n  }\n}\n\nclass AMQPView extends DataView {\n  getUint64(byteOffset, littleEndian) {\n    const left =  this.getUint32(byteOffset, littleEndian);\n    const right = this.getUint32(byteOffset + 4, littleEndian);\n    const combined = littleEndian ? left + 2**32 * right : 2**32 * left + right;\n    if (!Number.isSafeInteger(combined))\n      console.warn(combined, 'exceeds MAX_SAFE_INTEGER. Precision may be lost');\n    return combined\n  }\n  setUint64(byteOffset, value, littleEndian) {\n    this.setBigUint64(byteOffset, BigInt(value), littleEndian);\n  }\n  getInt64(byteOffset, value, littleEndian) {\n    return Number(this.getBigInt64(byteOffset, littleEndian))\n  }\n  setInt64(byteOffset, value, littleEndian) {\n    this.setBigInt64(byteOffset, BigInt(value), littleEndian);\n  }\n  getShortString(byteOffset, littleEndian) {\n    const len = this.getUint8(byteOffset, littleEndian);\n    byteOffset += 1;\n    const view = new Uint8Array(this.buffer, byteOffset, len);\n    const decoder = new TextDecoder();\n    return [decoder.decode(view), len + 1]\n  }\n  setShortString(byteOffset, string, littleEndian) {\n    const encoder = new TextEncoder();\n    const utf8 = encoder.encode(string);\n    this.setUint8(byteOffset, utf8.byteLength, littleEndian);\n    byteOffset += 1;\n    const view = new Uint8Array(this.buffer, byteOffset);\n    view.set(utf8);\n    return utf8.byteLength + 1\n  }\n  getLongString(byteOffset, littleEndian) {\n    const len = this.getUint32(byteOffset, littleEndian);\n    byteOffset += 4;\n    const view = new Uint8Array(this.buffer, byteOffset, len);\n    const decoder = new TextDecoder();\n    return [decoder.decode(view), len + 4]\n  }\n  setLongString(byteOffset, string, littleEndian) {\n    const encoder = new TextEncoder();\n    const utf8 = encoder.encode(string);\n    this.setUint32(byteOffset, utf8.byteLength, littleEndian);\n    byteOffset += 4;\n    const view = new Uint8Array(this.buffer, byteOffset);\n    view.set(utf8);\n    return utf8.byteLength + 4\n  }\n  getProperties(byteOffset, littleEndian) {\n    let j = byteOffset;\n    const flags = this.getUint16(j, littleEndian); j += 2;\n    const props = {};\n    if ((flags & 0x8000) > 0) {\n      const [contentType, len] = this.getShortString(j, littleEndian); j += len;\n      props.contentType = contentType;\n    }\n    if ((flags & 0x4000) > 0) {\n      const [contentEncoding, len] = this.getShortString(j, littleEndian); j += len;\n      props.contentEncoding = contentEncoding;\n    }\n    if ((flags & 0x2000) > 0) {\n      const [headers, len] = this.getTable(j, littleEndian); j += len;\n      props.headers = headers;\n    }\n    if ((flags & 0x1000) > 0) {\n      props.deliveryMode = this.getUint8(j, littleEndian); j += 1;\n    }\n    if ((flags & 0x0800) > 0) {\n      props.priority = this.getUint8(j, littleEndian); j += 1;\n    }\n    if ((flags & 0x0400) > 0) {\n      const [correlationId, len] = this.getShortString(j, littleEndian); j += len;\n      props.correlationId = correlationId;\n    }\n    if ((flags & 0x0200) > 0) {\n      const [replyTo, len] = this.getShortString(j, littleEndian); j += len;\n      props.replyTo = replyTo;\n    }\n    if ((flags & 0x0100) > 0) {\n      const [expiration, len] = this.getShortString(j, littleEndian); j += len;\n      props.expiration = expiration;\n    }\n    if ((flags & 0x0080) > 0) {\n      const [messageId, len] = this.getShortString(j, littleEndian); j += len;\n      props.messageId = messageId;\n    }\n    if ((flags & 0x0040) > 0) {\n      props.timestamp = new Date(this.getInt64(j, littleEndian) * 1000); j += 8;\n    }\n    if ((flags & 0x0020) > 0) {\n      const [type, len] = this.getShortString(j, littleEndian); j += len;\n      props.type = type;\n    }\n    if ((flags & 0x0010) > 0) {\n      const [userId, len] = this.getShortString(j, littleEndian); j += len;\n      props.userId = userId;\n    }\n    if ((flags & 0x0008) > 0) {\n      const [appId, len] = this.getShortString(j, littleEndian); j += len;\n      props.appId = appId;\n    }\n    const len = j - byteOffset;\n    return [props, len]\n  }\n  setProperties(byteOffset, properties, littleEndian) {\n    let j = byteOffset;\n    let flags = 0;\n    if (!(properties)) properties = {};\n    if (properties.contentType)     flags = flags | 0x8000;\n    if (properties.contentEncoding) flags = flags | 0x4000;\n    if (properties.headers)         flags = flags | 0x2000;\n    if (properties.deliveryMode)    flags = flags | 0x1000;\n    if (properties.priority)        flags = flags | 0x0800;\n    if (properties.correlationId)   flags = flags | 0x0400;\n    if (properties.replyTo)         flags = flags | 0x0200;\n    if (properties.expiration)      flags = flags | 0x0100;\n    if (properties.messageId)       flags = flags | 0x0080;\n    if (properties.timestamp)       flags = flags | 0x0040;\n    if (properties.type)            flags = flags | 0x0020;\n    if (properties.userId)          flags = flags | 0x0010;\n    if (properties.appId)           flags = flags | 0x0008;\n    this.setUint16(j, flags, littleEndian);\n    j += 2;\n    if (properties.contentType) {\n      j += this.setShortString(j, properties.contentType);\n    }\n    if (properties.contentEncoding) {\n      j += this.setShortString(j, properties.contentEncoding);\n    }\n    if (properties.headers) {\n      j += this.setTable(j, properties.headers);\n    }\n    if (properties.deliveryMode) {\n      this.setUint8(j, properties.deliveryMode); j += 1;\n    }\n    if (properties.priority) {\n      this.setUint8(j, properties.priority); j += 1;\n    }\n    if (properties.correlationId) {\n      j += this.setShortString(j, properties.correlationId);\n    }\n    if (properties.replyTo) {\n      j += this.setShortString(j, properties.replyTo);\n    }\n    if (properties.expiration) {\n      j += this.setShortString(j, properties.expiration);\n    }\n    if (properties.messageId) {\n      j += this.setShortString(j, properties.messageId);\n    }\n    if (properties.timestamp) {\n      const unixEpoch = Math.floor(Number(properties.timestamp) / 1000);\n      this.setInt64(j, unixEpoch, littleEndian); j += 8;\n    }\n    if (properties.type) {\n      j += this.setShortString(j, properties.type);\n    }\n    if (properties.userId) {\n      j += this.setShortString(j, properties.userId);\n    }\n    if (properties.appId) {\n      j += this.setShortString(j, properties.appId);\n    }\n    const len = j - byteOffset;\n    return len\n  }\n  getTable(byteOffset, littleEndian) {\n    const table = {};\n    let i = byteOffset;\n    const len = this.getUint32(byteOffset, littleEndian); i += 4;\n    for (; i < byteOffset + 4 + len;) {\n      const [k, strLen] = this.getShortString(i, littleEndian); i += strLen;\n      const [v, vLen] = this.getField(i, littleEndian); i += vLen;\n      table[k] = v;\n    }\n    return [table, len + 4]\n  }\n  setTable(byteOffset, table, littleEndian) {\n    let i = byteOffset + 4;\n    for (let [key, value] of Object.entries(table)) {\n      i += this.setShortString(i, key, littleEndian);\n      i += this.setField(i, value, littleEndian);\n    }\n    this.setUint32(byteOffset, i - byteOffset - 4, littleEndian);\n    return i - byteOffset\n  }\n  getField(byteOffset, littleEndian) {\n    let i = byteOffset;\n    const k = this.getUint8(i, littleEndian); i += 1;\n    const type = String.fromCharCode(k);\n    let v;\n    let len;\n    switch (type) {\n      case 't': v = this.getUint8(i, littleEndian) === 1; i += 1; break\n      case 'b': v = this.getInt8(i, littleEndian); i += 1; break\n      case 'B': v = this.getUint8(i, littleEndian); i += 1; break\n      case 's': v = this.getInt16(i, littleEndian); i += 2; break\n      case 'u': v = this.getUint16(i, littleEndian); i += 2; break\n      case 'I': v = this.getInt32(i, littleEndian); i += 4; break\n      case 'i': v = this.getUint32(i, littleEndian); i += 4; break\n      case 'l': v = this.getInt64(i, littleEndian); i += 8; break\n      case 'f': v = this.getFloat32(i, littleEndian); i += 4; break\n      case 'd': v = this.getFloat64(i, littleEndian); i += 8; break\n      case 'S': [v, len] = this.getLongString(i, littleEndian); i += len; break\n      case 'F': [v, len] = this.getTable(i, littleEndian); i += len; break\n      case 'A': [v, len] = this.getArray(i, littleEndian); i += len; break\n      case 'x': [v, len] = this.getByteArray(i); i += len; break\n      case 'T': v = new Date(this.getInt64(i, littleEndian) * 1000); i += 8; break\n      case 'V': v = null; break\n      case 'D': {\n        const scale = this.getUint8(i, littleEndian); i += 1;\n        const value = this.getUint32(i, littleEndian); i += 4;\n        v = value / 10**scale;\n        break\n      }\n      default:\n        throw `Field type '${k}' not supported`\n    }\n    return [v, i - byteOffset]\n  }\n  setField(byteOffset, field, littleEndian) {\n    let i = byteOffset;\n    switch (typeof field) {\n      case \"string\":\n        this.setUint8(i, 'S'.charCodeAt(), littleEndian); i += 1;\n        i += this.setLongString(i, field, littleEndian);\n        break\n      case \"boolean\":\n        this.setUint8(i, 't'.charCodeAt(), littleEndian); i += 1;\n        this.setUint8(i, field ? 1 : 0, littleEndian); i += 1;\n        break\n      case \"bigint\":\n        this.setUint8(i, 'l'.charCodeAt(), littleEndian); i += 1;\n        this.setBigInt64(i, field, littleEndian); i += 8;\n        break\n      case \"number\":\n        if (Number.isInteger(field)) {\n          if (-(2**32) < field < 2**32) {\n            this.setUint8(i, 'I'.charCodeAt(), littleEndian); i += 1;\n            this.setInt32(i, field, littleEndian); i += 4;\n          } else {\n            this.setUint8(i, 'l'.charCodeAt(), littleEndian); i += 1;\n            this.setInt64(i, field, littleEndian); i += 8;\n          }\n        } else {\n          if (-(2**32) < field < 2**32) {\n            this.setUint8(i, 'f'.charCodeAt(), littleEndian); i += 1;\n            this.setFloat32(i, field, littleEndian); i += 4;\n          } else {\n            this.setUint8(i, 'd'.charCodeAt(), littleEndian); i += 1;\n            this.setFloat64(i, field, littleEndian); i += 8;\n          }\n        }\n        break\n      case undefined:\n      case null:\n        this.setUint8(i, 'V'.charCodeAt(), littleEndian); i += 1;\n        break\n      case \"object\":\n        if (Array.isArray(field)) {\n          this.setUint8(i, 'A'.charCodeAt(), littleEndian); i += 1;\n          i += this.setArray(i, field, littleEndian);\n        } else if (field instanceof ArrayBuffer || field instanceof Uint8Array) {\n          this.setUint8(i, 'x'.charCodeAt(), littleEndian); i += 1;\n          i += this.setByteArray(i, field);\n        } else if (field instanceof Date) {\n          this.setUint8(i, 'T'.charCodeAt(), littleEndian); i += 1;\n          const unixEpoch = Math.floor(Number(field) / 1000);\n          this.setInt64(i, unixEpoch, littleEndian); i += 8;\n        } else {\n          this.setUint8(i, 'F'.charCodeAt(), littleEndian); i += 1;\n          i += this.setTable(i, field, littleEndian);\n        }\n        break\n      default:\n        throw `Unsupported field type '${field}'`\n    }\n    return i - byteOffset\n  }\n  getArray(byteOffset, littleEndian) {\n    const len = this.getUint32(byteOffset, littleEndian); byteOffset += 4;\n    const endOffset = byteOffset + len;\n    const v = [];\n    for (; byteOffset < endOffset;) {\n      const [field, fieldLen] = this.getField(byteOffset, littleEndian); byteOffset += fieldLen;\n      v.push(field);\n    }\n    return [v, len + 4]\n  }\n  setArray(byteOffset, array, littleEndian) {\n    const start = byteOffset;\n    byteOffset += 4;\n    array.forEach((e) => {\n      byteOffset += this.setField(byteOffset, e, littleEndian);\n    });\n    this.setUint32(start, byteOffset - start - 4, littleEndian);\n    return byteOffset - start\n  }\n  getByteArray(byteOffset) {\n    const len = this.getUint32(byteOffset);\n    const v = new Uint8Array(this.buffer, byteOffset + 4, len);\n    return [v, len + 4]\n  }\n  setByteArray(byteOffset, data) {\n    this.setUint32(byteOffset, data.byteLength);\n    const view = new Uint8Array(this.buffer, byteOffset + 4, data.byteLength);\n    view.set(data);\n    return data.byteLength + 4\n  }\n  setFrameEnd(j) {\n    this.setUint32(3, j - 7);\n    this.setUint8(j, 206);\n    return 1\n  }\n}\n\nclass AMQPConsumer {\n  constructor(channel, tag, onMessage) {\n    this.channel = channel;\n    this.tag = tag;\n    this.onMessage = onMessage;\n  }\n  wait(timeout) {\n    if (this.closedError) return Promise.reject(this.closedError)\n    if (this.closed) return Promise.resolve()\n    return new Promise((resolve, reject) => {\n      this.resolveWait = resolve;\n      this.rejectWait = reject;\n      if (timeout) {\n        const onTimeout = () => reject(new AMQPError(\"Timeout\", this.channel.connection));\n        this.timeoutId = setTimeout(onTimeout, timeout);\n      }\n    })\n  }\n  cancel() {\n    return this.channel.basicCancel(this.tag)\n  }\n  setClosed(err) {\n    this.closed = true;\n    this.closedError = err;\n    clearTimeout(this.timeoutId);\n    if (err) {\n      if (this.rejectWait) this.rejectWait(err);\n    } else {\n      if (this.resolveWait) this.resolveWait();\n    }\n  }\n}\n\nclass AMQPChannel {\n  constructor(connection, id) {\n    this.connection = connection;\n    this.id = id;\n    this.consumers = {};\n    this.promises = [];\n    this.unconfirmedPublishes = [];\n    this.closed = false;\n  }\n  queue(name = \"\", props = {}, args = {}) {\n    return new Promise((resolve, reject) => {\n      this.queueDeclare(name, props, args)\n        .then(({name}) => resolve(new AMQPQueue(this, name)))\n        .catch(reject);\n    })\n  }\n  prefetch(prefetchCount) {\n    return this.basicQos(prefetchCount)\n  }\n  onReturn(message) {\n    console.error(\"Message returned from server\", message);\n  }\n  close({ code = 200, reason = \"\" } = {}) {\n    if (this.closed) return this.rejectClosed()\n    this.closed = true;\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(512));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 0); j += 4;\n    frame.setUint16(j, 20); j += 2;\n    frame.setUint16(j, 40); j += 2;\n    frame.setUint16(j, code); j += 2;\n    j += frame.setShortString(j, reason);\n    frame.setUint16(j, 0); j += 2;\n    frame.setUint16(j, 0); j += 2;\n    frame.setUint8(j, 206); j += 1;\n    frame.setUint32(3, j - 8);\n    return this.sendRpc(frame, j)\n  }\n  basicGet(queue, { noAck = true } = {}) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(512));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 11); j += 4;\n    frame.setUint16(j, 60); j += 2;\n    frame.setUint16(j, 70); j += 2;\n    frame.setUint16(j, 0); j += 2;\n    j += frame.setShortString(j, queue);\n    frame.setUint8(j, noAck ? 1 : 0); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    frame.setUint32(3, j - 8);\n    return this.sendRpc(frame, j)\n  }\n  basicConsume(queue, {tag = \"\", noAck = true, exclusive = false, args = {}} = {}, callback) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(4096));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 0); j += 4;\n    frame.setUint16(j, 60); j += 2;\n    frame.setUint16(j, 20); j += 2;\n    frame.setUint16(j, 0); j += 2;\n    j += frame.setShortString(j, queue);\n    j += frame.setShortString(j, tag);\n    let bits = 0;\n    if (noAck)     bits = bits | (1 << 1);\n    if (exclusive) bits = bits | (1 << 2);\n    frame.setUint8(j, bits); j += 1;\n    j += frame.setTable(j, args);\n    frame.setUint8(j, 206); j += 1;\n    frame.setUint32(3, j - 8);\n    return new Promise((resolve, reject) => {\n      this.sendRpc(frame, j).then((consumerTag) =>  {\n        const consumer = new AMQPConsumer(this, consumerTag, callback);\n        this.consumers[consumerTag] = consumer;\n        resolve(consumer);\n      }).catch(reject);\n    })\n  }\n  basicCancel(tag) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(512));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 0); j += 4;\n    frame.setUint16(j, 60); j += 2;\n    frame.setUint16(j, 30); j += 2;\n    j += frame.setShortString(j, tag);\n    frame.setUint8(j, 0); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    frame.setUint32(3, j - 8);\n    return new Promise((resolve, reject) => {\n      this.sendRpc(frame, j).then((consumerTag) => {\n        const consumer = this.consumers[consumerTag];\n        if (consumer) {\n          consumer.setClosed();\n          delete this.consumers[consumerTag];\n        }\n        resolve(this);\n      }).catch(reject);\n    })\n  }\n  basicAck(deliveryTag, multiple = false) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(21));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 13); j += 4;\n    frame.setUint16(j, 60); j += 2;\n    frame.setUint16(j, 80); j += 2;\n    frame.setUint64(j, deliveryTag); j += 8;\n    frame.setUint8(j, multiple ? 1 : 0); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    return this.connection.send(new Uint8Array(frame.buffer, 0, 21))\n  }\n  basicNack(deliveryTag, requeue = false, multiple = false) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(21));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 13); j += 4;\n    frame.setUint16(j, 60); j += 2;\n    frame.setUint16(j, 120); j += 2;\n    frame.setUint64(j, deliveryTag); j += 8;\n    let bits = 0;\n    if (multiple) bits = bits | (1 << 0);\n    if (requeue)  bits = bits | (1 << 1);\n    frame.setUint8(j, bits); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    return this.connection.send(new Uint8Array(frame.buffer, 0, 21))\n  }\n  basicReject(deliveryTag, requeue = false) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(21));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 13); j += 4;\n    frame.setUint16(j, 60); j += 2;\n    frame.setUint16(j, 90); j += 2;\n    frame.setUint64(j, deliveryTag); j += 8;\n    frame.setUint8(j, requeue ? 1 : 0); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    return this.connection.send(new Uint8Array(frame.buffer, 0, 21))\n  }\n  basicRecover(requeue = false) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(13));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 5); j += 4;\n    frame.setUint16(j, 60); j += 2;\n    frame.setUint16(j, 110); j += 2;\n    frame.setUint8(j, requeue ? 1 : 0); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    return this.sendRpc(frame, j)\n  }\n  basicPublish(exchange, routingKey, data, properties, mandatory, immediate) {\n    if (this.closed) return this.rejectClosed()\n    if (this.connection.blocked)\n      return Promise.reject(new AMQPError(`Connection blocked by server: ${this.connection.blocked}`, this.connection))\n    if (data instanceof Uint8Array) ; else if (data instanceof ArrayBuffer) {\n      data = new Uint8Array(data);\n    } else if (typeof data === \"string\") {\n      const encoder = new TextEncoder();\n      data = encoder.encode(data);\n    } else {\n      const json = JSON.stringify(data);\n      const encoder = new TextEncoder();\n      data = encoder.encode(json);\n    }\n    const promises = [];\n    let j = 0;\n    let buffer = new AMQPView(new ArrayBuffer(16384));\n    buffer.setUint8(j, 1); j += 1;\n    buffer.setUint16(j, this.id); j += 2;\n    j += 4;\n    buffer.setUint16(j, 60); j += 2;\n    buffer.setUint16(j, 40); j += 2;\n    buffer.setUint16(j, 0); j += 2;\n    j += buffer.setShortString(j, exchange);\n    j += buffer.setShortString(j, routingKey);\n    let bits = 0;\n    if (mandatory) bits = bits | (1 << 0);\n    if (immediate) bits = bits | (1 << 1);\n    buffer.setUint8(j, bits); j += 1;\n    buffer.setUint8(j, 206); j += 1;\n    buffer.setUint32(3, j - 8);\n    const headerStart = j;\n    buffer.setUint8(j, 2); j += 1;\n    buffer.setUint16(j, this.id); j += 2;\n    j += 4;\n    buffer.setUint16(j, 60); j += 2;\n    buffer.setUint16(j, 0); j += 2;\n    buffer.setUint32(j, 0); j += 4;\n    buffer.setUint32(j, data.byteLength); j += 4;\n    j += buffer.setProperties(j, properties);\n    buffer.setUint8(j, 206); j += 1;\n    buffer.setUint32(headerStart + 3, j - headerStart - 8);\n    if (data.byteLength === 0) {\n      const p = this.connection.send(new Uint8Array(buffer.buffer, 0, j));\n      promises.push(p);\n    } else if (j >= 16384 - 8) {\n      const p = this.connection.send(new Uint8Array(buffer.buffer, 0, j));\n      promises.push(p);\n      j = 0;\n    }\n    for (let bodyPos = 0; bodyPos < data.byteLength;) {\n      const frameSize = Math.min(data.byteLength - bodyPos, 16384 - 8 - j);\n      const dataSlice = new Uint8Array(data.buffer, bodyPos, frameSize);\n      if (j === 0)\n        buffer = new AMQPView(new ArrayBuffer(frameSize + 8));\n      buffer.setUint8(j, 3); j += 1;\n      buffer.setUint16(j, this.id); j += 2;\n      buffer.setUint32(j, frameSize); j += 4;\n      const bodyView = new Uint8Array(buffer.buffer, j, frameSize);\n      bodyView.set(dataSlice); j += frameSize;\n      buffer.setUint8(j, 206); j += 1;\n      const p = this.connection.send(new Uint8Array(buffer.buffer, 0, j));\n      promises.push(p);\n      bodyPos += frameSize;\n      j = 0;\n    }\n    if (this.confirmId !== undefined) {\n      return new Promise((resolve, reject) =>\n        Promise.all(promises)\n          .then(() => this.unconfirmedPublishes.push([++this.confirmId, resolve, reject]))\n          .catch(reject)\n      )\n    } else {\n      return new Promise((resolve, reject) =>\n        Promise.all(promises)\n          .then(() => resolve(0))\n          .catch(reject))\n    }\n  }\n  basicQos(prefetchCount, prefetchSize = 0, global = false) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(19));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 11); j += 4;\n    frame.setUint16(j, 60); j += 2;\n    frame.setUint16(j, 10); j += 2;\n    frame.setUint32(j, prefetchSize); j += 4;\n    frame.setUint16(j, prefetchCount); j += 2;\n    frame.setUint8(j, global ? 1 : 0); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    return this.sendRpc(frame, j)\n  }\n  basicFlow(active = true) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(13));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 5); j += 4;\n    frame.setUint16(j, 20); j += 2;\n    frame.setUint16(j, 20); j += 2;\n    frame.setUint8(j, active ? 1 : 0); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    return this.sendRpc(frame, j)\n  }\n  confirmSelect() {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(13));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 5); j += 4;\n    frame.setUint16(j, 85); j += 2;\n    frame.setUint16(j, 10); j += 2;\n    frame.setUint8(j, 0); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    return this.sendRpc(frame, j)\n  }\n  queueDeclare(name = \"\", {passive = false, durable = name !== \"\", autoDelete = name === \"\", exclusive = name === \"\"} = {}, args = {}) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const declare = new AMQPView(new ArrayBuffer(4096));\n    declare.setUint8(j, 1); j += 1;\n    declare.setUint16(j, this.id); j += 2;\n    declare.setUint32(j, 0); j += 4;\n    declare.setUint16(j, 50); j += 2;\n    declare.setUint16(j, 10); j += 2;\n    declare.setUint16(j, 0); j += 2;\n    j += declare.setShortString(j, name);\n    let bits = 0;\n    if (passive)    bits = bits | (1 << 0);\n    if (durable)    bits = bits | (1 << 1);\n    if (exclusive)  bits = bits | (1 << 2);\n    if (autoDelete) bits = bits | (1 << 3);\n    declare.setUint8(j, bits); j += 1;\n    j += declare.setTable(j, args);\n    declare.setUint8(j, 206); j += 1;\n    declare.setUint32(3, j - 8);\n    return this.sendRpc(declare, j)\n  }\n  queueDelete(name = \"\", { ifUnused = false, ifEmpty = false } = {}) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(512));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 0); j += 4;\n    frame.setUint16(j, 50); j += 2;\n    frame.setUint16(j, 40); j += 2;\n    frame.setUint16(j, 0); j += 2;\n    j += frame.setShortString(j, name);\n    let bits = 0;\n    if (ifUnused) bits = bits | (1 << 0);\n    if (ifEmpty)  bits = bits | (1 << 1);\n    frame.setUint8(j, bits); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    frame.setUint32(3, j - 8);\n    return this.sendRpc(frame, j)\n  }\n  queueBind(queue, exchange, routingKey, args = {}) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const bind = new AMQPView(new ArrayBuffer(4096));\n    bind.setUint8(j, 1); j += 1;\n    bind.setUint16(j, this.id); j += 2;\n    bind.setUint32(j, 0); j += 4;\n    bind.setUint16(j, 50); j += 2;\n    bind.setUint16(j, 20); j += 2;\n    bind.setUint16(j, 0); j += 2;\n    j += bind.setShortString(j, queue);\n    j += bind.setShortString(j, exchange);\n    j += bind.setShortString(j, routingKey);\n    bind.setUint8(j, 0); j += 1;\n    j += bind.setTable(j, args);\n    bind.setUint8(j, 206); j += 1;\n    bind.setUint32(3, j - 8);\n    return this.sendRpc(bind, j)\n  }\n  queueUnbind(queue, exchange, routingKey, args = {}) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const unbind = new AMQPView(new ArrayBuffer(4096));\n    unbind.setUint8(j, 1); j += 1;\n    unbind.setUint16(j, this.id); j += 2;\n    unbind.setUint32(j, 0); j += 4;\n    unbind.setUint16(j, 50); j += 2;\n    unbind.setUint16(j, 50); j += 2;\n    unbind.setUint16(j, 0); j += 2;\n    j += unbind.setShortString(j, queue);\n    j += unbind.setShortString(j, exchange);\n    j += unbind.setShortString(j, routingKey);\n    j += unbind.setTable(j, args);\n    unbind.setUint8(j, 206); j += 1;\n    unbind.setUint32(3, j - 8);\n    return this.sendRpc(unbind, j)\n  }\n  queuePurge(queue) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const purge = new AMQPView(new ArrayBuffer(512));\n    purge.setUint8(j, 1); j += 1;\n    purge.setUint16(j, this.id); j += 2;\n    purge.setUint32(j, 0); j += 4;\n    purge.setUint16(j, 50); j += 2;\n    purge.setUint16(j, 30); j += 2;\n    purge.setUint16(j, 0); j += 2;\n    j += purge.setShortString(j, queue);\n    purge.setUint8(j, 1 ); j += 1;\n    purge.setUint8(j, 206); j += 1;\n    purge.setUint32(3, j - 8);\n    return this.sendRpc(purge, j)\n  }\n  exchangeDeclare(name, type, { passive = false, durable = true, autoDelete = false, internal = false } = {}, args = {}) {\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(4096));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 0); j += 4;\n    frame.setUint16(j, 40); j += 2;\n    frame.setUint16(j, 10); j += 2;\n    frame.setUint16(j, 0); j += 2;\n    j += frame.setShortString(j, name);\n    j += frame.setShortString(j, type);\n    let bits = 0;\n    if (passive)    bits = bits | (1 << 0);\n    if (durable)    bits = bits | (1 << 1);\n    if (autoDelete) bits = bits | (1 << 2);\n    if (internal)   bits = bits | (1 << 3);\n    frame.setUint8(j, bits); j += 1;\n    j += frame.setTable(j, args);\n    frame.setUint8(j, 206); j += 1;\n    frame.setUint32(3, j - 8);\n    return this.sendRpc(frame, j)\n  }\n  exchangeDelete(name, { ifUnused = false } = {}) {\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(512));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 0); j += 4;\n    frame.setUint16(j, 40); j += 2;\n    frame.setUint16(j, 20); j += 2;\n    frame.setUint16(j, 0); j += 2;\n    j += frame.setShortString(j, name);\n    let bits = 0;\n    if (ifUnused) bits = bits | (1 << 0);\n    frame.setUint8(j, bits); j += 1;\n    frame.setUint8(j, 206); j += 1;\n    frame.setUint32(3, j - 8);\n    return this.sendRpc(frame, j)\n  }\n  exchangeBind(destination, source, routingKey = \"\", args = {}) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const bind = new AMQPView(new ArrayBuffer(4096));\n    bind.setUint8(j, 1); j += 1;\n    bind.setUint16(j, this.id); j += 2;\n    bind.setUint32(j, 0); j += 4;\n    bind.setUint16(j, 40); j += 2;\n    bind.setUint16(j, 30); j += 2;\n    bind.setUint16(j, 0); j += 2;\n    j += bind.setShortString(j, destination);\n    j += bind.setShortString(j, source);\n    j += bind.setShortString(j, routingKey);\n    bind.setUint8(j, 0); j += 1;\n    j += bind.setTable(j, args);\n    bind.setUint8(j, 206); j += 1;\n    bind.setUint32(3, j - 8);\n    return this.sendRpc(bind, j)\n  }\n  exchangeUnbind(destination, source, routingKey = \"\", args = {}) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const unbind = new AMQPView(new ArrayBuffer(4096));\n    unbind.setUint8(j, 1); j += 1;\n    unbind.setUint16(j, this.id); j += 2;\n    unbind.setUint32(j, 0); j += 4;\n    unbind.setUint16(j, 40); j += 2;\n    unbind.setUint16(j, 40); j += 2;\n    unbind.setUint16(j, 0); j += 2;\n    j += unbind.setShortString(j, destination);\n    j += unbind.setShortString(j, source);\n    j += unbind.setShortString(j, routingKey);\n    unbind.setUint8(j, 0); j += 1;\n    j += unbind.setTable(j, args);\n    unbind.setUint8(j, 206); j += 1;\n    unbind.setUint32(3, j - 8);\n    return this.sendRpc(unbind, j)\n  }\n  txSelect() {\n    return this.txMethod(10)\n  }\n  txCommit() {\n    return this.txMethod(20)\n  }\n  txRollback() {\n    return this.txMethod(30)\n  }\n  txMethod(methodId) {\n    if (this.closed) return this.rejectClosed()\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(12));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, this.id); j += 2;\n    frame.setUint32(j, 4); j += 4;\n    frame.setUint16(j, 90); j += 2;\n    frame.setUint16(j, methodId); j += 2;\n    frame.setUint8(j, 206); j += 1;\n    return this.sendRpc(frame, j)\n  }\n  resolvePromise(value) {\n    if (this.promises.length === 0) return false\n    const [resolve, ] = this.promises.shift();\n    resolve(value);\n    return true\n  }\n  rejectPromise(err) {\n    if (this.promises.length === 0) return false\n    const [, reject] = this.promises.shift();\n    reject(err);\n    return true\n  }\n  sendRpc(frame, frameSize) {\n    return new Promise((resolve, reject) => {\n      this.connection.send(new Uint8Array(frame.buffer, 0, frameSize))\n        .then(() => this.promises.push([resolve, reject]))\n        .catch(reject);\n    })\n  }\n  setClosed(err) {\n    if (!this.closed) {\n      this.closed = true;\n      Object.values(this.consumers).forEach((consumer) => consumer.setClosed(err));\n      this.consumers = [];\n      while(this.rejectPromise(err)) { }\n      this.unconfirmedPublishes.forEach(([, , reject]) => reject(err));\n    }\n  }\n  rejectClosed() {\n    return Promise.reject(new AMQPError(\"Channel is closed\", this.connection))\n  }\n  publishConfirmed(deliveryTag, multiple, nack) {\n    const idx = this.unconfirmedPublishes.findIndex(([tag,]) => tag === deliveryTag);\n    if (idx !== -1) {\n      const confirmed = multiple ?\n        this.unconfirmedPublishes.splice(0, idx + 1) :\n        this.unconfirmedPublishes.splice(idx, 1);\n      confirmed.forEach(([tag, resolve, reject]) => {\n        if (nack)\n          reject(new Error(\"Message rejected\"));\n        else\n          resolve(tag);\n      });\n    } else {\n      console.warn(\"Cant find unconfirmed deliveryTag\", deliveryTag, \"multiple:\", multiple, \"nack:\", nack);\n    }\n  }\n  onMessageReady(message) {\n    if (this.delivery) {\n      this.delivery = null;\n      this.deliver(message);\n    } else if (this.getMessage) {\n      this.getMessage = null;\n      this.resolvePromise(message);\n    } else {\n      this.returned = null;\n      this.onReturn(message);\n    }\n  }\n  deliver(message) {\n    queueMicrotask(() => {\n      const consumer = this.consumers[message.consumerTag];\n      if (consumer) {\n        consumer.onMessage(message);\n      } else {\n        throw(new AMQPError(`Consumer ${message.consumerTag} on channel ${this.id} doesn't exists`, this.connection))\n      }\n    });\n  }\n}\n\nclass AMQPMessage {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  bodyToString() {\n    const decoder = new TextDecoder();\n    return decoder.decode(this.body)\n  }\n  bodyString() {\n    return this.bodyToString()\n  }\n  ack(multiple = false) {\n    return this.channel.basicAck(this.deliveryTag, multiple)\n  }\n  nack(requeue = false, multiple = false) {\n    return this.channel.basicNack(this.deliveryTag, requeue, multiple)\n  }\n  reject(requeue = false) {\n    return this.channel.basicReject(this.deliveryTag, requeue)\n  }\n  cancelConsumer() {\n    return this.channel.basicCancel(this.consumerTag)\n  }\n}\n\nconst VERSION = '1.1.6';\nclass AMQPBaseClient {\n  constructor(vhost, username, password, name, platform) {\n    this.vhost = vhost;\n    this.username = username;\n    Object.defineProperty(this, 'password', {\n      value: password,\n      enumerable: false\n    });\n    this.name = name;\n    this.platform = platform;\n    this.channels = [new AMQPChannel(this, 0)];\n    this.closed = false;\n  }\n  channel(id) {\n    if (this.closed) return this.rejectClosed()\n    if (id > 0 && this.channels[id]) return this.channels[id]\n    if (!id)\n      id = this.channels.findIndex((ch) => ch === undefined);\n    if (id === -1) id = this.channels.length;\n    const channel = new AMQPChannel(this, id);\n    this.channels[id] = channel;\n    let j = 0;\n    const channelOpen = new AMQPView(new ArrayBuffer(13));\n    channelOpen.setUint8(j, 1); j += 1;\n    channelOpen.setUint16(j, id); j += 2;\n    channelOpen.setUint32(j, 5); j += 4;\n    channelOpen.setUint16(j, 20); j += 2;\n    channelOpen.setUint16(j, 10); j += 2;\n    channelOpen.setUint8(j, 0); j += 1;\n    channelOpen.setUint8(j, 206); j += 1;\n    return new Promise((resolve, reject) => {\n      this.send(new Uint8Array(channelOpen.buffer, 0, 13))\n        .then(() => channel.promises.push([resolve, reject]))\n        .catch(reject);\n    })\n  }\n  close({ code = 200, reason = \"\" } = {}) {\n    if (this.closed) return this.rejectClosed()\n    this.closed = true;\n    let j = 0;\n    const frame = new AMQPView(new ArrayBuffer(512));\n    frame.setUint8(j, 1); j += 1;\n    frame.setUint16(j, 0); j += 2;\n    frame.setUint32(j, 0); j += 4;\n    frame.setUint16(j, 10); j += 2;\n    frame.setUint16(j, 50); j += 2;\n    frame.setUint16(j, code); j += 2;\n    j += frame.setShortString(j, reason);\n    frame.setUint16(j, 0); j += 2;\n    frame.setUint16(j, 0); j += 2;\n    frame.setUint8(j, 206); j += 1;\n    frame.setUint32(3, j - 8);\n    return new Promise((resolve, reject) => {\n      this.send(new Uint8Array(frame.buffer, 0, j))\n        .then(() => this.closePromise = [resolve, reject])\n        .catch(reject);\n    })\n  }\n  connect() {\n    throw \"Abstract method not implemented\"\n  }\n  send() {\n    throw \"Abstract method not implemented\"\n  }\n  closeSocket() {\n    throw \"Abstract method not implemented\"\n  }\n  rejectClosed() {\n    return Promise.reject(new AMQPError(\"Connection closed\", this))\n  }\n  rejectConnect(err) {\n    if (this.connectPromise) {\n      const [, reject] = this.connectPromise;\n      delete this.connectPromise;\n      reject(err);\n    }\n    this.closed = true;\n    this.closeSocket();\n  }\n  parseFrames(view) {\n    for (let i = 0; i < view.byteLength;) {\n      let j = 0;\n      const type = view.getUint8(i); i += 1;\n      const channelId = view.getUint16(i); i += 2;\n      const frameSize = view.getUint32(i); i += 4;\n      switch (type) {\n        case 1: {\n          const classId = view.getUint16(i); i += 2;\n          const methodId = view.getUint16(i); i += 2;\n          switch (classId) {\n            case 10: {\n              switch (methodId) {\n                case 10: {\n                  i += frameSize - 4;\n                  const startOk = new AMQPView(new ArrayBuffer(4096));\n                  startOk.setUint8(j, 1); j += 1;\n                  startOk.setUint16(j, 0); j += 2;\n                  startOk.setUint32(j, 0); j += 4;\n                  startOk.setUint16(j, 10); j += 2;\n                  startOk.setUint16(j, 11); j += 2;\n                  const clientProps = {\n                    connection_name: this.name,\n                    product: \"amqp-client.js\",\n                    information: \"https://github.com/cloudamqp/amqp-client.js\",\n                    version: VERSION,\n                    platform: this.platform,\n                    capabilities: {\n                      \"authentication_failure_close\": true,\n                      \"basic.nack\": true,\n                      \"connection.blocked\": false,\n                      \"consumer_cancel_notify\": true,\n                      \"exchange_exchange_bindings\": true,\n                      \"per_consumer_qos\": true,\n                      \"publisher_confirms\": true,\n                    }\n                  };\n                  if (!this.name) delete clientProps[\"connection_name\"];\n                  j += startOk.setTable(j, clientProps);\n                  j += startOk.setShortString(j, \"PLAIN\");\n                  const response = `\\u0000${this.username}\\u0000${this.password}`;\n                  j += startOk.setLongString(j, response);\n                  j += startOk.setShortString(j, \"\");\n                  startOk.setUint8(j, 206); j += 1;\n                  startOk.setUint32(3, j - 8);\n                  this.send(new Uint8Array(startOk.buffer, 0, j)).catch(this.rejectConnect);\n                  break\n                }\n                case 30: {\n                  const channelMax = view.getUint16(i); i += 2;\n                  const frameMax = view.getUint32(i); i += 4;\n                  const heartbeat = view.getUint16(i); i += 2;\n                  this.channelMax = channelMax;\n                  this.frameMax = Math.min(16384, frameMax);\n                  this.heartbeat = Math.min(0, heartbeat);\n                  const tuneOk = new AMQPView(new ArrayBuffer(20));\n                  tuneOk.setUint8(j, 1); j += 1;\n                  tuneOk.setUint16(j, 0); j += 2;\n                  tuneOk.setUint32(j, 12); j += 4;\n                  tuneOk.setUint16(j, 10); j += 2;\n                  tuneOk.setUint16(j, 31); j += 2;\n                  tuneOk.setUint16(j, this.channelMax); j += 2;\n                  tuneOk.setUint32(j, this.frameMax); j += 4;\n                  tuneOk.setUint16(j, this.heartbeat); j += 2;\n                  tuneOk.setUint8(j, 206); j += 1;\n                  this.send(new Uint8Array(tuneOk.buffer, 0, j)).catch(this.rejectConnect);\n                  j = 0;\n                  const open = new AMQPView(new ArrayBuffer(512));\n                  open.setUint8(j, 1); j += 1;\n                  open.setUint16(j, 0); j += 2;\n                  open.setUint32(j, 0); j += 4;\n                  open.setUint16(j, 10); j += 2;\n                  open.setUint16(j, 40); j += 2;\n                  j += open.setShortString(j, this.vhost);\n                  open.setUint8(j, 0); j += 1;\n                  open.setUint8(j, 0); j += 1;\n                  open.setUint8(j, 206); j += 1;\n                  open.setUint32(3, j - 8);\n                  this.send(new Uint8Array(open.buffer, 0, j)).catch(this.rejectConnect);\n                  break\n                }\n                case 41: {\n                  i += 1;\n                  const [resolve, ] = this.connectPromise;\n                  delete this.connectPromise;\n                  resolve(this);\n                  break\n                }\n                case 50: {\n                  const code = view.getUint16(i); i += 2;\n                  const [text, strLen] = view.getShortString(i); i += strLen;\n                  const classId = view.getUint16(i); i += 2;\n                  const methodId = view.getUint16(i); i += 2;\n                  console.debug(\"connection closed by server\", code, text, classId, methodId);\n                  const msg = `connection closed: ${text} (${code})`;\n                  const err = new AMQPError(msg, this);\n                  this.channels.forEach((ch) => ch.setClosed(err));\n                  this.channels = [];\n                  const closeOk = new AMQPView(new ArrayBuffer(12));\n                  closeOk.setUint8(j, 1); j += 1;\n                  closeOk.setUint16(j, 0); j += 2;\n                  closeOk.setUint32(j, 4); j += 4;\n                  closeOk.setUint16(j, 10); j += 2;\n                  closeOk.setUint16(j, 51); j += 2;\n                  closeOk.setUint8(j, 206); j += 1;\n                  this.send(new Uint8Array(closeOk.buffer, 0, j))\n                    .catch(err => console.warn(\"Error while sending Connection#CloseOk\", err));\n                  this.rejectConnect(err);\n                  break\n                }\n                case 51: {\n                  this.channels.forEach((ch) => ch.setClosed());\n                  this.channels = [];\n                  const [resolve, ] = this.closePromise;\n                  delete this.closePromise;\n                  resolve();\n                  this.closeSocket();\n                  break\n                }\n                case 60: {\n                  const [reason, len] = view.getShortString(i); i += len;\n                  this.blocked = reason;\n                  break\n                }\n                case 61: {\n                  this.blocked = null;\n                  break\n                }\n                default:\n                  i += frameSize - 4;\n                  console.error(\"unsupported class/method id\", classId, methodId);\n              }\n              break\n            }\n            case 20: {\n              switch (methodId) {\n                case 11: {\n                  i += 4;\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise(channel);\n                  break\n                }\n                case 21: {\n                  const active = view.getUint8(i) !== 0; i += 1;\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise(active);\n                  break\n                }\n                case 40: {\n                  const code = view.getUint16(i); i += 2;\n                  const [text, strLen] = view.getShortString(i); i += strLen;\n                  const classId = view.getUint16(i); i += 2;\n                  const methodId = view.getUint16(i); i += 2;\n                  console.debug(\"channel\", channelId, \"closed\", code, text, classId, methodId);\n                  const channel = this.channels[channelId];\n                  if (channel) {\n                    const msg = `channel ${channelId} closed: ${text} (${code})`;\n                    const err = new AMQPError(msg, this);\n                    channel.setClosed(err);\n                    delete this.channels[channelId];\n                  } else {\n                    console.warn(\"channel\", channelId, \"already closed\");\n                  }\n                  const closeOk = new AMQPView(new ArrayBuffer(12));\n                  closeOk.setUint8(j, 1); j += 1;\n                  closeOk.setUint16(j, channelId); j += 2;\n                  closeOk.setUint32(j, 4); j += 4;\n                  closeOk.setUint16(j, 20); j += 2;\n                  closeOk.setUint16(j, 41); j += 2;\n                  closeOk.setUint8(j, 206); j += 1;\n                  this.send(new Uint8Array(closeOk.buffer, 0, j))\n                    .catch(err => console.error(\"Error while sending Channel#closeOk\", err));\n                  break\n                }\n                case 41: {\n                  const channel = this.channels[channelId];\n                  if (channel) {\n                    channel.setClosed();\n                    delete this.channels[channelId];\n                    channel.resolvePromise();\n                  } else {\n                    this.rejectPromise(`channel ${channelId} already closed`);\n                  }\n                  break\n                }\n                default:\n                  i += frameSize - 4;\n                  console.error(\"unsupported class/method id\", classId, methodId);\n              }\n              break\n            }\n            case 40: {\n              switch (methodId) {\n                case 11: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                case 21: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                case 31: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                case 51: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                default:\n                  i += frameSize - 4;\n                  console.error(\"unsupported class/method id\", classId, methodId);\n              }\n              break\n            }\n            case 50: {\n              switch (methodId) {\n                case 11: {\n                  const [name, strLen] = view.getShortString(i); i += strLen;\n                  const messageCount = view.getUint32(i); i += 4;\n                  const consumerCount = view.getUint32(i); i += 4;\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise({ name, messageCount, consumerCount });\n                  break\n                }\n                case 21: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                case 31: {\n                  const messageCount = view.getUint32(i); i += 4;\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise({ messageCount });\n                  break\n                }\n                case 41: {\n                  const messageCount = view.getUint32(i); i += 4;\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise({ messageCount });\n                  break\n                }\n                case 51: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                default:\n                  i += frameSize - 4;\n                  console.error(\"unsupported class/method id\", classId, methodId);\n              }\n              break\n            }\n            case 60: {\n              switch (methodId) {\n                case 11: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                case 21: {\n                  const [ consumerTag, len ] = view.getShortString(i); i += len;\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise(consumerTag);\n                  break\n                }\n                case 31: {\n                  const [consumerTag, len] = view.getShortString(i); i += len;\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise(consumerTag);\n                  break\n                }\n                case 50: {\n                  const code = view.getUint16(i); i += 2;\n                  const [text, len] = view.getShortString(i); i += len;\n                  const [exchange, exchangeLen] = view.getShortString(i); i += exchangeLen;\n                  const [routingKey, routingKeyLen] = view.getShortString(i); i += routingKeyLen;\n                  const channel = this.channels[channelId];\n                  if (!channel) {\n                    console.warn(\"Cannot return to closed channel\", channelId);\n                    break\n                  }\n                  channel.returned = {\n                    replyCode: code,\n                    replyText: text,\n                    exchange: exchange,\n                    routingKey: routingKey,\n                  };\n                  break\n                }\n                case 60: {\n                  const [ consumerTag, consumerTagLen ] = view.getShortString(i); i += consumerTagLen;\n                  const deliveryTag = view.getUint64(i); i += 8;\n                  const redelivered = view.getUint8(i) === 1; i += 1;\n                  const [ exchange, exchangeLen ]= view.getShortString(i); i += exchangeLen;\n                  const [ routingKey, routingKeyLen ]= view.getShortString(i); i += routingKeyLen;\n                  const channel = this.channels[channelId];\n                  if (!channel) {\n                    console.warn(\"Cannot deliver to closed channel\", channelId);\n                    break\n                  }\n                  const message = new AMQPMessage(channel);\n                  message.consumerTag = consumerTag;\n                  message.deliveryTag = deliveryTag;\n                  message.exchange = exchange;\n                  message.routingKey = routingKey;\n                  message.redelivered = redelivered;\n                  channel.delivery = message;\n                  break\n                }\n                case 71: {\n                  const deliveryTag = view.getUint64(i); i += 8;\n                  const redelivered = view.getUint8(i) === 1; i += 1;\n                  const [exchange, exchangeLen]= view.getShortString(i); i += exchangeLen;\n                  const [routingKey, routingKeyLen]= view.getShortString(i); i += routingKeyLen;\n                  const messageCount = view.getUint32(i); i += 4;\n                  const channel = this.channels[channelId];\n                  if (!channel) {\n                    console.warn(\"Cannot deliver to closed channel\", channelId);\n                    break\n                  }\n                  const message = new AMQPMessage(channel);\n                  message.deliveryTag = deliveryTag;\n                  message.redelivered = redelivered;\n                  message.exchange = exchange;\n                  message.routingKey = routingKey;\n                  message.messageCount = messageCount;\n                  channel.getMessage = message;\n                  break\n                }\n                case 72: {\n                  const [ , len]= view.getShortString(i); i += len;\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise(null);\n                  break\n                }\n                case 80: {\n                  const deliveryTag = view.getUint64(i); i += 8;\n                  const multiple = view.getUint8(i) === 1; i += 1;\n                  const channel = this.channels[channelId];\n                  if (!channel) {\n                    console.warn(\"Got publish confirm ack for closed channel\", channelId);\n                    break\n                  }\n                  channel.publishConfirmed(deliveryTag, multiple, false);\n                  break\n                }\n                case 111: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                case 120: {\n                  const deliveryTag = view.getUint64(i); i += 8;\n                  const multiple = view.getUint8(i) === 1; i += 1;\n                  const channel = this.channels[channelId];\n                  if (!channel) {\n                    console.warn(\"Got publish confirm nack for closed channel\", channelId);\n                    break\n                  }\n                  channel.publishConfirmed(deliveryTag, multiple, true);\n                  break\n                }\n                default:\n                  i += frameSize - 4;\n                  console.error(\"unsupported class/method id\", classId, methodId);\n              }\n              break\n            }\n            case 85: {\n              switch (methodId) {\n                case 11: {\n                  const channel = this.channels[channelId];\n                  channel.confirmId = 0;\n                  channel.resolvePromise();\n                  break\n                }\n                default:\n                  i += frameSize - 4;\n                  console.error(\"unsupported class/method id\", classId, methodId);\n              }\n              break\n            }\n            case 90: {\n              switch (methodId) {\n                case 11:\n                case 21:\n                case 31: {\n                  const channel = this.channels[channelId];\n                  channel.resolvePromise();\n                  break\n                }\n                default:\n                  i += frameSize - 4;\n                  console.error(\"unsupported class/method id\", classId, methodId);\n              }\n              break\n            }\n            default:\n              i += frameSize - 2;\n              console.error(\"unsupported class id\", classId);\n          }\n          break\n        }\n        case 2: {\n          i += 2;\n          i += 2;\n          const bodySize = view.getUint64(i); i += 8;\n          const [properties, propLen] = view.getProperties(i); i += propLen;\n          const channel = this.channels[channelId];\n          if (!channel) {\n            console.warn(\"Cannot deliver to closed channel\", channelId);\n            break\n          }\n          const message = channel.delivery || channel.getMessage || channel.returned;\n          message.bodySize = bodySize;\n          message.properties = properties;\n          message.body = new Uint8Array(bodySize);\n          message.bodyPos = 0;\n          if (bodySize === 0)\n            channel.onMessageReady(message);\n          break\n        }\n        case 3: {\n          const channel = this.channels[channelId];\n          if (!channel) {\n            console.warn(\"Cannot deliver to closed channel\", channelId);\n            i += frameSize;\n            break\n          }\n          const message = channel.delivery || channel.getMessage || channel.returned;\n          const bodyPart = new Uint8Array(view.buffer, i, frameSize);\n          message.body.set(bodyPart, message.bodyPos);\n          message.bodyPos += frameSize;\n          i += frameSize;\n          if (message.bodyPos === message.bodySize)\n            channel.onMessageReady(message);\n          break\n        }\n        case 8: {\n          const heartbeat = new AMQPView(new ArrayBuffer(8));\n          heartbeat.setUint8(j, 1); j += 1;\n          heartbeat.setUint16(j, 0); j += 2;\n          heartbeat.setUint32(j, 0); j += 4;\n          heartbeat.setUint8(j, 206); j += 1;\n          this.send(new Uint8Array(heartbeat.buffer, 0, j))\n            .catch(err => console.warn(\"Error while sending heartbeat\", err));\n          break\n        }\n        default:\n          console.error(\"invalid frame type:\", type);\n          i += frameSize;\n      }\n      const frameEnd = view.getUint8(i); i += 1;\n      if (frameEnd != 206)\n        console.error(\"Invalid frame end\", frameEnd);\n    }\n  }\n}\n\nclass AMQPWebSocketClient extends AMQPBaseClient {\n  constructor(url, vhost = \"/\", username = \"guest\", password = \"guest\", name = undefined) {\n    super(vhost, username, password, name, window.navigator.userAgent);\n    this.url = url;\n  }\n  connect() {\n    const socket = new WebSocket(this.url);\n    this.socket = socket;\n    socket.binaryType = \"arraybuffer\";\n    socket.onmessage = (event) => this.parseFrames(new AMQPView(event.data));\n    return new Promise((resolve, reject) => {\n      this.connectPromise = [resolve, reject];\n      socket.onclose = reject;\n      socket.onerror = reject;\n      socket.onopen = () => {\n        const amqpstart = new Uint8Array([65, 77, 81, 80, 0, 0, 9, 1]);\n        socket.send(amqpstart);\n      };\n    })\n  }\n  send(bytes) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.socket.send(bytes);\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    })\n  }\n  closeSocket() {\n    this.socket.close();\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AMQPWebSocketClient);\n\n\n//# sourceURL=webpack://20211125_amqp_test/./node_modules/@cloudamqp/amqp-client/dist/amqp-websocket-client.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./assets/index.js");
/******/ 	
/******/ })()
;